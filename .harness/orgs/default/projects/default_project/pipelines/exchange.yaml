pipeline:
  name: Exchange Application Pipeline
  identifier: exchange_application_pipeline
  projectIdentifier: default_project
  orgIdentifier: default
  tags:
    system: exchange-application
    version: 1.0.0
  properties:
    ci:
      codebase:
        connectorRef: gitconnector
        repoName: Exchange-Plan
        build: <+input>
  stages:
    - stage:
        name: Environment Setup
        identifier: setup
        description: Setup Python environment and install dependencies
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: System Information
                  identifier: system_info
                  spec:
                    shell: Bash
                    command: |
                      echo "Exchange Application System Setup"
                      echo "Date: $(date)"
                      echo "Python version: $(python3 --version)"
                      echo "Pip version: $(pip3 --version)"
                      echo "Git commit: $(git rev-parse --short HEAD)"
              - step:
                  type: Run
                  name: Install Dependencies
                  identifier: install_deps
                  spec:
                    shell: Bash
                    command: |
                      echo "Installing Python dependencies..."
                      pip3 install --upgrade pip
                      pip3 install PyYAML
                      echo "Dependencies installed"
    - stage:
        name: Validation and Generation
        identifier: validation_generation
        description: Validate eligibility and generate application documents
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Validate Configuration
                  identifier: validate_config
                  spec:
                    shell: Bash
                    command: |
                      echo "Validating system configuration..."
                      echo "Current directory: $(pwd)"
                      ls -la

                      echo "This pipeline is designed for Exchange-Plan repository"
                      echo "Repository structure verification skipped for now"
                      echo "Configuration validation completed"
              - step:
                  type: Run
                  name: Run Eligibility Validation
                  identifier: run_validation
                  spec:
                    shell: Bash
                    command: |
                      echo "Starting eligibility validation..."
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"

                      if [ -f "intelligence_gathering/validator.py" ]; then
                        echo "Running application eligibility validator..."
                        python3 intelligence_gathering/validator.py
                        
                        if [ -f "final_applications/eligibility_report.md" ]; then
                          echo "Validation completed successfully"
                          head -20 final_applications/eligibility_report.md
                        else
                          echo "Validation script ran but no report generated"
                        fi
                      else
                        echo "Validator script not found, skipping validation"
                      fi
              - step:
                  type: Run
                  name: Generate Application Documents
                  identifier: generate_docs
                  spec:
                    shell: Bash
                    command: |
                      echo "Generating application documents..."
                      echo "Current directory: $(pwd)"
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"

                      # Check if generator script exists
                      if [ -f "build_scripts/generate_docs.py" ]; then
                        echo "Found document generator script"
                        
                        # Create final_applications directory if it doesn't exist
                        mkdir -p final_applications
                        echo "Ensured final_applications directory exists"
                        
                        echo ""
                        echo "Running document generator..."
                        python3 build_scripts/generate_docs.py
                        
                        echo ""
                        echo "Checking generated files..."
                        if [ -d "final_applications" ]; then
                          echo "final_applications directory exists"
                          
                          # Count documents
                          study_plans=$(find final_applications -name "*_study_plan_*.md" 2>/dev/null | wc -l)
                          cv_docs=$(find final_applications -name "*_cv_*.md" 2>/dev/null | wc -l)
                          all_files=$(find final_applications -type f 2>/dev/null | wc -l)
                          
                          echo "Generated: $study_plans study plans, $cv_docs CV documents"
                          echo "Total files in final_applications: $all_files"
                          
                          # Show directory structure
                          echo ""
                          echo "Directory structure:"
                          find final_applications -type f | head -20
                          
                          # Check for dashboard
                          if [ -f "final_applications/dashboard.md" ]; then
                            echo ""
                            echo "Dashboard generated successfully"
                          else
                            echo ""
                            echo "WARNING: Dashboard not generated"
                          fi
                        else
                          echo "ERROR: final_applications directory not created"
                        fi
                      else
                        echo "ERROR: Document generator not found at build_scripts/generate_docs.py"
                        echo "Available build_scripts files:"
                        ls -la build_scripts/ 2>/dev/null || echo "build_scripts directory not found"
                      fi
    - stage:
        name: Quality Check and Save Results
        identifier: quality_and_save
        description: Quality check and save results to GitHub
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Quality Check
                  identifier: quality_check
                  spec:
                    shell: Bash
                    command: |
                      echo "Running quality checks..."
                      echo "Current directory: $(pwd)"

                      if [ -d "final_applications" ]; then
                        doc_count=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
                        echo "Total documents found: $doc_count"
                        
                        if [ $doc_count -gt 0 ]; then
                          echo "Quality check passed"
                          
                          # Show document summary
                          echo ""
                          echo "Generated documents:"
                          find final_applications -name "*.md" -type f | sort
                        else
                          echo "No documents generated"
                        fi
                      else
                        echo "final_applications directory not found"
                      fi
              
              - step:
                  type: Run
                  name: Generate Application PDFs
                  identifier: generate_pdfs
                  spec:
                    shell: Bash
                    command: |
                      echo "🎯 開始生成申請PDF文件..."
                      
                      # 安裝PDF生成依賴
                      echo "📦 安裝PDF生成依賴..."
                      apt-get update -qq
                      apt-get install -y \
                        libpango-1.0-0 \
                        libharfbuzz0b \
                        libpangoft2-1.0-0 \
                        libfontconfig1 \
                        libcairo2 \
                        libgdk-pixbuf2.0-0 \
                        shared-mime-info \
                        fonts-dejavu-core \
                        fonts-liberation \
                        fonts-noto-cjk \
                        bc
                      
                      pip3 install \
                        PyYAML>=6.0 \
                        markdown>=3.4 \
                        Pillow>=9.0.0 \
                        weasyprint>=59.0 \
                        reportlab>=4.0.0 \
                        img2pdf>=0.4.4 \
                        cssselect2>=0.7.0 \
                        html5lib>=1.1 \
                        tinycss2>=1.2.0 \
                        python-dateutil>=2.8.0
                      
                      echo "✅ 依賴安裝完成"
                      
                      # 檢查PDF生成腳本
                      if [ ! -f "build_scripts/generate_pdfs.py" ]; then
                        echo "❌ 找不到PDF生成腳本"
                        echo "跳過PDF生成步驟"
                        exit 0
                      fi
                      
                      # 建立PDF輸出目錄
                      mkdir -p application_pdfs
                      
                      # 執行PDF生成
                      echo "📄 生成申請PDF文件..."
                      python3 build_scripts/generate_pdfs.py \
                        --type all \
                        --profile my_profile.yml \
                        --output application_pdfs
                      
                      # 檢查生成結果
                      if [ -d "application_pdfs" ] && [ "$(ls -A application_pdfs 2>/dev/null)" ]; then
                        echo "✅ PDF生成成功！"
                        echo ""
                        echo "📁 生成的PDF文件:"
                        ls -lh application_pdfs/
                        
                        # 品質檢查
                        echo ""
                        echo "🔍 PDF品質檢查..."
                        for pdf in application_pdfs/*.pdf; do
                          if [ -f "$pdf" ]; then
                            filename=$(basename "$pdf")
                            size=$(stat --format="%s" "$pdf")
                            size_mb=$(echo "scale=2; $size / 1024 / 1024" | bc -l)
                            
                            echo "📄 $filename: ${size_mb}MB"
                            
                            # 檢查大小限制
                            if [[ "$pdf" == *"CV"* ]] && (( $(echo "$size_mb > 4" | bc -l) )); then
                              echo "   ⚠️ 超過CV檔案4MB限制"
                            elif [[ "$pdf" != *"CV"* ]] && (( $(echo "$size_mb > 10" | bc -l) )); then
                              echo "   ⚠️ 超過10MB檔案限制"
                            else
                              echo "   ✅ 檔案大小符合要求"
                            fi
                          fi
                        done
                        
                        echo "PDF_GENERATED=true" >> $HARNESS_ENV
                      else
                        echo "⚠️ PDF生成失敗或沒有生成檔案"
                        echo "PDF_GENERATED=false" >> $HARNESS_ENV
                      fi
              - step:
                  type: Run
                  name: Commit and Push Results to GitHub
                  identifier: commit_push
                  spec:
                    shell: Bash
                    envVariables:
                      GITHUB_TOKEN: <+secrets.getValue("github_pat")>
                    command: |
                      echo "Preparing to commit generated files to GitHub..."

                      # Debug: Show current directory and contents
                      echo "Current directory: $(pwd)"
                      echo "Directory contents:"
                      ls -la

                      # Configure git
                      git config user.email "harness-pipeline@dennisleehappy.org"
                      git config user.name "Harness Pipeline Bot"

                      # Setup authentication using Personal Access Token
                      if [ -n "$GITHUB_TOKEN" ]; then
                        echo "✅ GitHub token configured"
                        git remote set-url origin https://${GITHUB_TOKEN}@github.com/National-Cheng-Chi-University-DCT-Dep/Exchange-Plan.git
                        
                        # Test authentication
                        if git ls-remote origin &> /dev/null; then
                          echo "✅ Git authentication successful"
                        else
                          echo "❌ Git authentication failed"
                          echo "⚠️ Skipping push, but files are committed locally"
                          exit 0
                        fi
                      else
                        echo "⚠️ GitHub token not configured"
                        echo "⚠️ Files will be committed locally but not pushed"
                        echo "📖 See .harness/GIT_PUSH_FIX.md for setup instructions"
                      fi

                      # Search for final_applications directory
                      echo ""
                      echo "Searching for final_applications directory..."
                      find . -name "final_applications" -type d 2>/dev/null || echo "No final_applications directory found"

                      # Search for any generated .md files
                      echo ""
                      echo "Searching for generated markdown files..."
                      find . -name "*.md" -path "*/final_applications/*" -type f 2>/dev/null | head -10 || echo "No markdown files found in final_applications"

                      # Search for generated PDF files
                      echo ""
                      echo "Searching for generated PDF files..."
                      find . -name "*.pdf" -path "*/application_pdfs/*" -type f 2>/dev/null | head -10 || echo "No PDF files found in application_pdfs"

                      # Configure git
                      git config user.email "harness-pipeline@dennisleehappy.org"
                      git config user.name "Harness Pipeline Bot"

                      files_to_commit=false

                      # Check if there are files to commit
                      if [ -d "final_applications" ] && [ "$(ls -A final_applications 2>/dev/null)" ]; then
                        echo ""
                        echo "Found final_applications directory with content!"
                        echo "Markdown files to commit:"
                        find final_applications -type f | head -20
                        files_to_commit=true
                      fi

                      # Check for PDF files to commit
                      if [ -d "application_pdfs" ] && [ "$(ls -A application_pdfs 2>/dev/null)" ]; then
                        echo ""
                        echo "Found application_pdfs directory with content!"
                        echo "PDF files to commit:"
                        find application_pdfs -type f | head -10
                        files_to_commit=true
                      fi

                      if [ "$files_to_commit" == "true" ]; then
                        # Add all generated files
                        git add final_applications/ application_pdfs/ 2>/dev/null || true
                        
                        # Check if there are changes
                        if git diff --staged --quiet; then
                          echo ""
                          echo "ℹ️ No changes to commit (files already exist in repository)"
                        else
                          # Commit with timestamp
                          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
                          # 檢查生成了什麼類型的文件
                          md_count=$(find final_applications -name "*.md" 2>/dev/null | wc -l || echo "0")
                          pdf_count=$(find application_pdfs -name "*.pdf" 2>/dev/null | wc -l || echo "0")
                          
                          git commit -m "feat: Generate exchange application documents and PDFs - $TIMESTAMP
                          
                          Generated by Harness Pipeline
                          Pipeline ID: <+pipeline.sequenceId>
                          Execution Time: <+pipeline.startTs>
                          
                          Documents generated:
                          - Markdown documents: $md_count files
                          - PDF documents: $pdf_count files
                          - Eligibility report and dashboard
                          - Study plans and CVs for qualified universities
                          - Application-ready PDF files for ISCTE submission"
                          
                          # Push to GitHub
                          echo ""
                          echo "Pushing to GitHub..."
                          git push origin HEAD:<+codebase.branch>
                          
                          echo ""
                          echo "Successfully pushed generated documents to GitHub!"
                          echo "Branch: <+codebase.branch>"
                          echo "Commit: $(git rev-parse --short HEAD)"
                        fi
                      else
                        echo ""
                        echo "WARNING: No files found to commit"
                        echo "Neither final_applications nor application_pdfs directories contain files"
                        echo "This means the document and PDF generation steps may have failed"
                        echo "Please check the previous pipeline steps for errors"
                        
                        mkdir -p pipeline_logs
                        echo "Pipeline Execution Summary" > pipeline_logs/execution_summary.txt
                        echo "==========================" >> pipeline_logs/execution_summary.txt
                        echo "Pipeline ID: <+pipeline.sequenceId>" >> pipeline_logs/execution_summary.txt
                        echo "Status: Completed but no documents generated" >> pipeline_logs/execution_summary.txt
                        echo "Current Directory: $(pwd)" >> pipeline_logs/execution_summary.txt
                        
                        git add pipeline_logs/ 2>/dev/null || true
                        git commit -m "docs: Pipeline execution log - no documents generated" 2>/dev/null || echo "Nothing new to commit"
                        
                        if [ -n "$GITHUB_TOKEN" ]; then
                          git push origin HEAD:<+codebase.branch> 2>/dev/null || echo "Push skipped"
                        fi
                      fi
              - step:
                  type: Run
                  name: Success Notification
                  identifier: success_notification
                  spec:
                    shell: Bash
                    command: |
                      echo "=========================================="
                      echo "Exchange Application Pipeline Completed!"
                      echo "=========================================="
                      echo "Generated: $(date)"
                      echo "GitHub Branch: <+codebase.branch>"
                      echo ""
                      echo "📁 Generated Files:"
                      if [ -d "final_applications" ] && [ "$(ls -A final_applications 2>/dev/null)" ]; then
                        md_count=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
                        echo "  • Markdown documents: $md_count files (final_applications/)"
                      fi
                      if [ -d "application_pdfs" ] && [ "$(ls -A application_pdfs 2>/dev/null)" ]; then
                        pdf_count=$(find application_pdfs -name "*.pdf" 2>/dev/null | wc -l)
                        echo "  • PDF documents: $pdf_count files (application_pdfs/)"
                      fi
                      echo ""
                      echo "✅ All files have been committed and pushed to GitHub!"
                      echo ""
                      echo "📋 Ready for ISCTE Application:"
                      echo "  • CV (PDF, max 4MB)"
                      echo "  • Transcript of Records (PDF, max 10MB)"
                      echo "  • Other Documents (PDF, max 10MB)"
                      echo ""
                      echo "Next steps:"
                      echo "1. Pull the latest changes from GitHub"
                      echo "2. Review documents in final_applications/ and application_pdfs/"
                      echo "3. Verify PDF file sizes and content"
                      echo "4. Submit PDFs to ISCTE application portal"
                      echo "5. Check application deadlines"
                      echo "6. Prepare additional required documents"
                      echo "=========================================="
  variables:
    - name: profile_file
      type: String
      description: Profile configuration file
      value: my_profile.yml
    - name: output_directory
      type: String
      description: Output directory for generated files
      value: final_applications
    - name: template_directory
      type: String
      description: Template directory
      value: templates
  notificationRules:
    - name: Pipeline Success Notification
      identifier: success_notification
      pipelineEvents:
        - type: PipelineSuccess
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - admin@dennisleehappy.org
          subject: Exchange Application Pipeline Completed Successfully
          body: |
            The Exchange Application Pipeline has completed successfully.

            Pipeline ID: <+pipeline.sequenceId>
            Execution Time: <+pipeline.startTs>
            Commit: <+codebase.commitSha>

            Generated documents are available in the final_applications directory.

            Best regards,
            ExchangeApp-IAC System
      enabled: true
    - name: Pipeline Failure Notification
      identifier: failure_notification
      pipelineEvents:
        - type: PipelineFailed
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - admin@dennisleehappy.org
          subject: Exchange Application Pipeline Failed
          body: |
            The Exchange Application Pipeline has failed.

            Pipeline ID: <+pipeline.sequenceId>
            Failed Stage: <+pipeline.stage.name>

            Please check the pipeline logs for detailed error information.

            Best regards,
            ExchangeApp-IAC System
      enabled: true
