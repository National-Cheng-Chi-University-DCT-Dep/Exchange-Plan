pipeline:
  name: Exchange Application Pipeline
  identifier: exchange_application_pipeline
  projectIdentifier: default_project
  orgIdentifier: default
  tags:
    system: exchange-application
    version: 1.0.0
  properties:
    ci:
      codebase:
        connectorRef: github_connector
        repoName: Exchange-Plan
        build: <+input>
  stages:
    - stage:
        name: Environment Setup
        identifier: setup
        description: Setup Python environment and install dependencies
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: System Information
                  identifier: system_info
                  spec:
                    shell: Bash
                    command: |
                      echo "Exchange Application System Setup"
                      echo "Date: $(date)"
                      echo "Python version: $(python3 --version)"
                      echo "Pip version: $(pip3 --version)"
                      echo "Git commit: $(git rev-parse --short HEAD)"
              - step:
                  type: Run
                  name: Install Dependencies
                  identifier: install_deps
                  spec:
                    shell: Bash
                    command: |
                      echo "Installing Python dependencies..."
                      pip3 install --upgrade pip
                      pip3 install PyYAML
                      echo "Dependencies installed"
    - stage:
        name: Validation and Generation
        identifier: validation_generation
        description: Validate eligibility and generate application documents
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Validate Configuration
                  identifier: validate_config
                  spec:
                    shell: Bash
                    command: |
                      echo "Validating system configuration..."
                      echo "Current directory: $(pwd)"
                      ls -la

                      echo "This pipeline is designed for Exchange-Plan repository"
                      echo "Repository structure verification skipped for now"
                      echo "Configuration validation completed"
              - step:
                  type: Run
                  name: Run Eligibility Validation
                  identifier: run_validation
                  spec:
                    shell: Bash
                    command: |
                      echo "Starting eligibility validation..."
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"

                      if [ -f "intelligence_gathering/validator.py" ]; then
                        echo "Running application eligibility validator..."
                        python3 intelligence_gathering/validator.py
                        
                        if [ -f "final_applications/eligibility_report.md" ]; then
                          echo "Validation completed successfully"
                          head -20 final_applications/eligibility_report.md
                        else
                          echo "Validation script ran but no report generated"
                        fi
                      else
                        echo "Validator script not found, skipping validation"
                      fi
              - step:
                  type: Run
                  name: Generate Application Documents
                  identifier: generate_docs
                  spec:
                    shell: Bash
                    command: |
                      echo "Generating application documents..."
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"

                      if [ -f "build_scripts/generate_docs.py" ]; then
                        echo "Running document generator..."
                        python3 build_scripts/generate_docs.py
                        
                        study_plans=$(find final_applications -name "*_study_plan_*.md" 2>/dev/null | wc -l)
                        cv_docs=$(find final_applications -name "*_cv_*.md" 2>/dev/null | wc -l)
                        echo "Generated: $study_plans study plans, $cv_docs CV documents"
                        
                        if [ -f "final_applications/dashboard.md" ]; then
                          echo "Dashboard generated successfully"
                        fi
                      else
                        echo "Document generator not found, skipping generation"
                      fi
    - stage:
        name: Quality Check and Save Results
        identifier: quality_and_save
        description: Quality check and save results to GitHub
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Quality Check
                  identifier: quality_check
                  spec:
                    shell: Bash
                    command: |
                      echo "Running quality checks..."
                      echo "Current directory: $(pwd)"

                      if [ -d "final_applications" ]; then
                        doc_count=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
                        echo "Total documents found: $doc_count"
                        
                        if [ $doc_count -gt 0 ]; then
                          echo "Quality check passed"
                          
                          # Show document summary
                          echo ""
                          echo "Generated documents:"
                          find final_applications -name "*.md" -type f | sort
                        else
                          echo "No documents generated"
                        fi
                      else
                        echo "final_applications directory not found"
                      fi
              - step:
                  type: Run
                  name: Commit and Push Results to GitHub
                  identifier: commit_push
                  spec:
                    shell: Bash
                    command: |
                      echo "Committing generated files to GitHub..."

                      # Configure git
                      git config user.email "harness-pipeline@dennisleehappy.org"
                      git config user.name "Harness Pipeline Bot"

                      # Check if there are files to commit
                      if [ -d "final_applications" ]; then
                        # Add all generated files
                        git add final_applications/
                        
                        # Check if there are changes
                        if git diff --staged --quiet; then
                          echo "No changes to commit"
                        else
                          # Commit with timestamp
                          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
                          git commit -m "feat: Generate exchange application documents - $TIMESTAMP
                          
                          Generated by Harness Pipeline
                          Pipeline ID: <+pipeline.sequenceId>
                          Execution Time: <+pipeline.startTs>
                          
                          Documents generated:
                          - Eligibility report
                          - Application dashboard
                          - Study plans and CVs for qualified universities"
                          
                          # Push to GitHub
                          echo "Pushing to GitHub..."
                          git push origin HEAD:<+codebase.branch>
                          
                          echo "Successfully pushed generated documents to GitHub!"
                          echo "Branch: <+codebase.branch>"
                          echo "Commit: $(git rev-parse --short HEAD)"
                        fi
                      else
                        echo "No final_applications directory found, nothing to commit"
                      fi
              - step:
                  type: Run
                  name: Success Notification
                  identifier: success_notification
                  spec:
                    shell: Bash
                    command: |
                      echo "=========================================="
                      echo "Exchange Application Pipeline Completed!"
                      echo "=========================================="
                      echo "Generated: $(date)"
                      echo "Location: final_applications/"
                      echo "GitHub Branch: <+codebase.branch>"
                      echo ""
                      echo "Generated files have been committed and pushed to GitHub!"
                      echo ""
                      echo "Next steps:"
                      echo "1. Pull the latest changes from GitHub"
                      echo "2. Review generated documents in final_applications/"
                      echo "3. Check application deadlines"
                      echo "4. Prepare English test scores"
                      echo "5. Contact recommenders"
                      echo "=========================================="
  variables:
    - name: profile_file
      type: String
      description: Profile configuration file
      value: my_profile.yml
    - name: output_directory
      type: String
      description: Output directory for generated files
      value: final_applications
    - name: template_directory
      type: String
      description: Template directory
      value: templates
  notificationRules:
    - name: Pipeline Success Notification
      identifier: success_notification
      pipelineEvents:
        - type: PipelineSuccess
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - admin@dennisleehappy.org
          subject: Exchange Application Pipeline Completed Successfully
          body: |
            The Exchange Application Pipeline has completed successfully.

            Pipeline ID: <+pipeline.sequenceId>
            Execution Time: <+pipeline.startTs>
            Commit: <+codebase.commitSha>

            Generated documents are available in the final_applications directory.

            Best regards,
            ExchangeApp-IAC System
      enabled: true
    - name: Pipeline Failure Notification
      identifier: failure_notification
      pipelineEvents:
        - type: PipelineFailed
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - admin@dennisleehappy.org
          subject: Exchange Application Pipeline Failed
          body: |
            The Exchange Application Pipeline has failed.

            Pipeline ID: <+pipeline.sequenceId>
            Failed Stage: <+pipeline.stage.name>

            Please check the pipeline logs for detailed error information.

            Best regards,
            ExchangeApp-IAC System
      enabled: true
