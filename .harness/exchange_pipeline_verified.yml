pipeline:
  name: "Exchange Application Pipeline"
  identifier: "exchange_application_pipeline"
  projectIdentifier: "exchange_plan"
  orgIdentifier: "default"
  tags: 
    system: "exchange-application"
    version: "1.0.0"
  
  properties:
    ci:
      codebase:
        connectorRef: "github_connector"
        repoName: "Exchange-Plan"
        build: <+input>

  stages:
    - stage:
        name: "Environment Setup"
        identifier: "setup"
        description: "Setup Python environment and install dependencies"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "System Information"
                  identifier: "system_info"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "🔧 Exchange Application System Setup"
                      echo "Date: $(date)"
                      echo "Python version: $(python3 --version)"
                      echo "Pip version: $(pip3 --version)"
                      echo "Git commit: $(git rev-parse --short HEAD)"
                      
              - step:
                  type: "Run"
                  name: "Install Dependencies"
                  identifier: "install_deps"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "📦 Installing Python dependencies..."
                      
                      # Install core dependencies
                      pip3 install --upgrade pip
                      pip3 install PyYAML
                      
                      echo "✅ Dependencies installed"
                      
                      echo "📋 Installed packages:"
                      pip3 list | grep -E "(PyYAML)"

    - stage:
        name: "Validation and Generation"
        identifier: "validation_generation"
        description: "Validate eligibility and generate application documents"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "Validate Configuration"
                  identifier: "validate_config"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "🔍 Validating system configuration..."
                      
                      # Show current directory and list files
                      echo "Current directory: $(pwd)"
                      echo "Directory contents:"
                      ls -la
                      
                      # Navigate to the correct directory if needed
                      WORK_DIR="."
                      if [ -d "Exchange-Plan" ]; then
                        echo "Found Exchange-Plan directory, navigating to it..."
                        cd Exchange-Plan
                        WORK_DIR="Exchange-Plan"
                        echo "Now in: $(pwd)"
                        ls -la
                      fi
                      
                      # Check and locate required files
                      echo "🔍 Locating configuration files..."
                      
                      # Check available files first
                      echo "Available .yml files:"
                      find . -name "*.yml" -type f 2>/dev/null || echo "No .yml files found"
                      
                      # Check source_data directory contents
                      if [ -d "source_data" ]; then
                        echo "source_data directory contents:"
                        ls -la source_data/
                      else
                        echo "source_data directory not found"
                      fi
                      
                      # Try to use available files or create missing ones
                      if [ -f "source_data/schools.yml" ]; then
                        echo "✅ Found schools.yml, using as university options"
                        UNIV_FILE="source_data/schools.yml"
                      elif [ -f "source_data/university_level_options.yml" ]; then
                        UNIV_FILE="source_data/university_level_options.yml"
                        echo "✅ Found university options file: $UNIV_FILE"
                      else
                        echo "❌ No university options file found"
                        echo "Creating basic university_level_options.yml..."
                        mkdir -p source_data
                        cat > source_data/university_level_options.yml << 'EOF'
universities:
  - school_name: "Stanford University"
    school_id: "stanford"
    location: "California, USA"
    gpa_requirement: 3.0
    ielts_requirement: 7.0
    notable_courses:
      - "Advanced Computer Security"
      - "Machine Learning"
      - "Quantum Computing"
  - school_name: "MIT"
    school_id: "mit"
    location: "Massachusetts, USA"
    gpa_requirement: 3.5
    ielts_requirement: 7.0
    notable_courses:
      - "Advanced Programming"
      - "Data Structures"
      - "Software Engineering"
EOF
                        UNIV_FILE="source_data/university_level_options.yml"
                        echo "✅ Created university options file: $UNIV_FILE"
                      fi
                      
                      if [ -f "source_data/college_level_options.yml" ]; then
                        COLLEGE_FILE="source_data/college_level_options.yml"
                        echo "✅ Found college options file: $COLLEGE_FILE"
                      else
                        echo "❌ No college options file found"
                        echo "Creating basic college_level_options.yml..."
                        cat > source_data/college_level_options.yml << 'EOF'
colleges:
  - school_name: "Community College Example"
    school_id: "community_college"
    location: "Various, USA"
    gpa_requirement: 2.5
    ielts_requirement: 6.0
    notable_courses:
      - "Introduction to Programming"
      - "Computer Science Basics"
EOF
                        COLLEGE_FILE="source_data/college_level_options.yml"
                        echo "✅ Created college options file: $COLLEGE_FILE"
                      fi
                      
                      # Try to find or create profile file
                      if [ -f "my_profile.yml" ]; then
                        PROFILE_FILE="my_profile.yml"
                        echo "✅ Found profile file: $PROFILE_FILE"
                      else
                        echo "❌ my_profile.yml not found, creating basic profile..."
                        cat > my_profile.yml << 'EOF'
personal_info:
  name: "Student Name"
  current_university: "National Chengchi University"
  current_major: "Digital Content and Technologies"
  
academic_info:
  gpa: 3.96
  gpa_scale: 4.3
  ielts_score: 7.5
  
completed_courses:
  - "Advanced Programming"
  - "Data Structures"
  - "Software Engineering"
  - "Digital Content Management"
  
target_programs:
  - "Computer Science"
  - "Software Engineering"
  - "Information Technology"
EOF
                        PROFILE_FILE="my_profile.yml"
                        echo "✅ Created profile file: $PROFILE_FILE"
                      fi
                      
                      # Validate YAML syntax
                      echo "🔍 Validating YAML syntax..."
                      python3 -c "import yaml; yaml.safe_load(open('$PROFILE_FILE'))"
                      echo "✅ $PROFILE_FILE is valid"
                      
                      python3 -c "import yaml; yaml.safe_load(open('$UNIV_FILE'))"
                      echo "✅ $UNIV_FILE is valid"
                      
                      python3 -c "import yaml; yaml.safe_load(open('$COLLEGE_FILE'))"
                      echo "✅ $COLLEGE_FILE is valid"
                      
                      # Export file paths for subsequent steps
                      echo "export PROFILE_FILE='$PROFILE_FILE'" >> ~/.bashrc
                      echo "export UNIV_FILE='$UNIV_FILE'" >> ~/.bashrc
                      echo "export COLLEGE_FILE='$COLLEGE_FILE'" >> ~/.bashrc
                      echo "export WORK_DIR='$WORK_DIR'" >> ~/.bashrc
                      
              - step:
                  type: "Run"
                  name: "Run Eligibility Validation"
                  identifier: "run_validation"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "✅ Starting eligibility validation..."
                      
                      # Source environment variables from previous step
                      source ~/.bashrc 2>/dev/null || true
                      
                      # Navigate to the correct directory if needed
                      if [ -d "Exchange-Plan" ]; then
                        echo "Navigating to Exchange-Plan directory..."
                        cd Exchange-Plan
                      fi
                      
                      echo "Current directory: $(pwd)"
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"
                      
                      # Check if validator script exists
                      if [ ! -f "intelligence_gathering/validator.py" ]; then
                        echo "❌ Validator script not found at intelligence_gathering/validator.py"
                        echo "Searching for validator script:"
                        find . -name "validator.py" -type f 2>/dev/null || echo "No validator.py found"
                        exit 1
                      fi
                      
                      echo "🔍 Running application eligibility validator..."
                      python3 intelligence_gathering/validator.py
                      
                      # Check validation results with better error handling
                      if [ -f "final_applications/eligibility_report.md" ]; then
                        echo "✅ Validation completed successfully"
                        echo "📊 Validation summary:"
                        head -20 final_applications/eligibility_report.md
                      else
                        echo "❌ Validation failed - eligibility_report.md not found"
                        echo "Checking final_applications directory:"
                        ls -la final_applications/ 2>/dev/null || echo "final_applications directory not found"
                        echo "Checking current directory for any generated files:"
                        find . -name "*.md" -type f 2>/dev/null | head -10
                        exit 1
                      fi
                      
              - step:
                  type: "Run"
                  name: "Generate Application Documents"
                  identifier: "generate_docs"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "📝 Generating customized application documents..."
                      
                      # Source environment variables from previous step
                      source ~/.bashrc 2>/dev/null || true
                      
                      # Navigate to the correct directory if needed
                      if [ -d "Exchange-Plan" ]; then
                        echo "Navigating to Exchange-Plan directory..."
                        cd Exchange-Plan
                      fi
                      
                      echo "Current directory: $(pwd)"
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"
                      
                      # Check if document generator script exists
                      if [ ! -f "build_scripts/generate_docs.py" ]; then
                        echo "❌ Document generator script not found at build_scripts/generate_docs.py"
                        echo "Searching for generate_docs script:"
                        find . -name "generate_docs.py" -type f 2>/dev/null || echo "No generate_docs.py found"
                        exit 1
                      fi
                      
                      echo "📝 Running document generator..."
                      python3 build_scripts/generate_docs.py
                      
                      # Document generation summary with better error handling
                      echo "📊 Document Generation Summary:"
                      
                      # Count study plans
                      study_plans=$(find final_applications -name "*_study_plan_*.md" 2>/dev/null | wc -l)
                      echo "  Study plans generated: $study_plans"
                      
                      # Count CV documents
                      cv_docs=$(find final_applications -name "*_cv_*.md" 2>/dev/null | wc -l)
                      echo "  CV documents generated: $cv_docs"
                      
                      # Check dashboard
                      if [ -f "final_applications/dashboard.md" ]; then
                        echo "✅ Dashboard generated successfully"
                      else
                        echo "❌ Dashboard generation failed"
                        echo "Checking final_applications directory:"
                        ls -la final_applications/ 2>/dev/null || echo "final_applications directory not found"
                        
                        # Check if any documents were generated at all
                        total_docs=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
                        if [ $total_docs -eq 0 ]; then
                          echo "❌ No documents were generated"
                          exit 1
                        else
                          echo "⚠️ Some documents generated but dashboard missing"
                        fi
                      fi

    - stage:
        name: "Quality Check and Notification"
        identifier: "quality_notification"
        description: "Quality check and success notification"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "Quality Check"
                  identifier: "quality_check"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "🔍 Running quality checks..."
                      
                      # Source environment variables from previous step
                      source ~/.bashrc 2>/dev/null || true
                      
                      # Navigate to the correct directory if needed
                      if [ -d "Exchange-Plan" ]; then
                        echo "Navigating to Exchange-Plan directory..."
                        cd Exchange-Plan
                      fi
                      
                      echo "Current directory: $(pwd)"
                      
                      # Comprehensive quality checks
                      echo "🔍 Performing comprehensive quality checks..."
                      
                      # Check if final_applications directory exists
                      if [ ! -d "final_applications" ]; then
                        echo "❌ final_applications directory not found"
                        echo "Available directories:"
                        ls -la | grep "^d" || echo "No directories found"
                        exit 1
                      fiExecuting the following command(s):

set -e; echo " Validating system configuration..."



# Show current directory and list files

echo "Current directory: $(pwd)"

echo "Directory contents:"

ls -la



# Navigate to the correct directory if needed

WORK_DIR="."

if [ -d "Exchange-Plan" ]; then

  echo "Found Exchange-Plan directory, navigating to it..."

  cd Exchange-Plan

  WORK_DIR="Exchange-Plan"

  echo "Now in: $(pwd)"

  ls -la

fi



# Check and locate required files

echo " Locating configuration files..."



# Direct file checks (simpler approach)

if [ -f "my_profile.yml" ]; then

  PROFILE_FILE="my_profile.yml"

  echo " Found profile file: $PROFILE_FILE"

else

  echo " my_profile.yml not found in current directory"

  echo "Available .yml files:"

  find . -name "*.yml" -type f 2>/dev/null || echo "No .yml files found"

  exit 1

fi



if [ -f "source_data/university_level_options.yml" ]; then

  UNIV_FILE="source_data/university_level_options.yml"

  echo " Found university options file: $UNIV_FILE"

else

  echo " university_level_options.yml not found in source_data/"

  echo "Searching in source_data directories:"

  find . -name "source_data" -type d -exec ls -la {} \; 2>/dev/null || echo "No source_data directories found"

  if [ -d "source_data" ]; then

    echo "source_data directory contents:"

    ls -la source_data/ 2>/dev/null || echo "Cannot list source_data contents"

  fi

  exit 1

fi



if [ -f "source_data/college_level_options.yml" ]; then

  COLLEGE_FILE="source_data/college_level_options.yml"

  echo " Found college options file: $COLLEGE_FILE"

else

  echo " college_level_options.yml not found in source_data/"

  exit 1

fi



# Validate YAML syntax

echo " Validating YAML syntax..."

python3 -c "import yaml; yaml.safe_load(open('$PROFILE_FILE'))"

echo " $PROFILE_FILE is valid"



python3 -c "import yaml; yaml.safe_load(open('$UNIV_FILE'))"

echo " $UNIV_FILE is valid"



python3 -c "import yaml; yaml.safe_load(open('$COLLEGE_FILE'))"

echo " $COLLEGE_FILE is valid"



# Export file paths for subsequent steps

echo "export PROFILE_FILE='$PROFILE_FILE'" >> ~/.bashrc

echo "export UNIV_FILE='$UNIV_FILE'" >> ~/.bashrc

echo "export COLLEGE_FILE='$COLLEGE_FILE'" >> ~/.bashrc

echo "export WORK_DIR='$WORK_DIR'" >> ~/.bashrc

 Validating system configuration...

Current directory: /harness

Directory contents:

total 220

drwxrwxrwx 13 root root  4096 Oct  7 03:51 .

drwxr-xr-x 22 root root  4096 Oct  7 03:51 ..

drwxr-xr-x  8 root root  4096 Oct  7 03:51 .git

-rw-r--r--  1 root root  2060 Oct  7 03:51 .gitignore

drwxr-xr-x  3 root root  4096 Oct  7 03:51 .harness

-rw-r--r--  1 root root  9033 Oct  7 03:51 ADVANCED_FEATURES_COMPLETE.md

drwxr-xr-x  2 root root  4096 Oct  7 03:51 DevDocs

-rw-r--r--  1 root root  5852 Oct  7 03:51 INSTALLATION_GUIDE.md

-rw-r--r--  1 root root  9762 Oct  7 03:51 README.md

-rw-r--r--  1 root root  7363 Oct  7 03:51 README_APPLICATION_SYSTEM.md

-rw-r--r--  1 root root 16574 Oct  7 03:51 README_INTELLIGENCE_SYSTEM.md

-rw-r--r--  1 root root  9652 Oct  7 03:51 SAFE_AREA.md

-rw-r--r--  1 root root 14373 Oct  7 03:51 SYSTEM_IMPLEMENTATION_COMPLETE.md

drwxr-xr-x  2 root root  4096 Oct  7 03:51 analysis

drwxr-xr-x  2 root root  4096 Oct  7 03:51 build_scripts

drwxr-xr-x  2 root root  4096 Oct  7 03:51 data_collection

-rw-r--r--  1 root root   823 Oct  7 03:51 generate.bat

-rw-r--r--  1 root root  3280 Oct  7 03:51 generate.ps1

-rw-r--r--  1 root root 20828 Oct  7 03:51 intelligence.ps1

-rw-r--r--  1 root root  7349 Oct  7 03:51 intelligence_simple.ps1

drwxr-xr-x  2 root root  4096 Oct  7 03:51 monitoring

drwxr-xr-x  2 root root  4096 Oct  7 03:51 notifications

-rw-r--r--  1 root root 32508 Oct  7 03:51 report.md

drwxr-xr-x  2 root root  4096 Oct  7 03:51 source_data

drwxr-xr-x  2 root root  4096 Oct  7 03:51 templates

-rw-r--r--  1 root root  2788 Oct  7 03:51 test_validation_fix.py

drwxr-xr-x  6 root root  4096 Oct  7 03:51 國外碩士申請資料

 Locating configuration files...

 my_profile.yml not found in current directory

Available .yml files:

./.harness/application_pipeline.yml

./source_data/recommenders.yml

./source_data/schools.yml

./notifications/settings.yml

                      
                      # Check eligibility report
                      if [ ! -f "final_applications/eligibility_report.md" ]; then
                        echo "❌ 資格報告未生成"
                        echo "Checking final_applications directory:"
                        ls -la final_applications/ 2>/dev/null || echo "final_applications directory is empty"
                        exit 1
                      fi
                      echo "✅ 資格報告存在"
                      
                      # Check dashboard
                      if [ ! -f "final_applications/dashboard.md" ]; then
                        echo "❌ 儀表板未生成"
                        exit 1
                      fi
                      echo "✅ 儀表板存在"
                      
                      # Count generated documents
                      study_plans=$(find final_applications -name "*_study_plan_*.md" 2>/dev/null | wc -l)
                      cv_docs=$(find final_applications -name "*_cv_*.md" 2>/dev/null | wc -l)
                      total_docs=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
                      
                      echo "📊 文件統計:"
                      echo "  讀書計畫: $study_plans 份"
                      echo "  履歷文件: $cv_docs 份"
                      echo "  總文件數: $total_docs 份"
                      
                      if [ $study_plans -eq 0 ]; then
                        echo "❌ 未生成任何讀書計畫"
                        echo "Available files in final_applications:"
                        find final_applications -type f 2>/dev/null | head -20 || echo "No files found"
                        exit 1
                      fi
                      
                      if [ $cv_docs -eq 0 ]; then
                        echo "⚠️ 未生成任何履歷文件"
                      fi
                      
                      # Check file sizes to ensure they're not empty
                      empty_files=$(find final_applications -name "*.md" -size 0 2>/dev/null | wc -l)
                      if [ $empty_files -gt 0 ]; then
                        echo "⚠️ 發現 $empty_files 個空文件"
                        find final_applications -name "*.md" -size 0 2>/dev/null
                      fi
                      
                      echo "✅ 文件完整性檢查通過"
                      
              - step:
                  type: "Run"
                  name: "Success Notification"
                  identifier: "success_notification"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "=========================================="
                      echo "交換申請文件生成完成！"
                      echo "=========================================="
                      echo "生成時間: $(date)"
                      echo "文件位置: final_applications/"
                      echo "儀表板: final_applications/dashboard.md"
                      echo ""
                      echo "下一步建議:"
                      echo "1. 檢查各校申請截止日期"
                      echo "2. 準備英語檢定成績"
                      echo "3. 聯繫推薦人撰寫推薦信"
                      echo ""
                      echo "---"
                      echo "此通知由 ExchangeApp-IAC 自動發送"
                      echo "=========================================="

    - stage:
        name: "Artifact Management"
        identifier: "artifacts"
        description: "Save and organize generated artifacts"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "Organize Generated Files"
                  identifier: "organize_files"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "📁 Organizing generated artifacts..."
                      
                      # Source environment variables from previous step
                      source ~/.bashrc 2>/dev/null || true
                      
                      # Navigate to the correct directory if needed
                      if [ -d "Exchange-Plan" ]; then
                        echo "Navigating to Exchange-Plan directory..."
                        cd Exchange-Plan
                      fi
                      
                      echo "Current directory: $(pwd)"
                      
                      # Create artifacts directory structure
                      echo "Creating artifact directory structure..."
                      mkdir -p artifacts/reports artifacts/documents artifacts/data
                      
                      # Copy reports with better error handling
                      echo "📋 Copying reports..."
                      if [ -f "final_applications/eligibility_report.md" ]; then
                        cp final_applications/eligibility_report.md artifacts/reports/
                        echo "✅ Eligibility report archived"
                      else
                        echo "⚠️ Eligibility report not found"
                      fi
                      
                      if [ -f "final_applications/dashboard.md" ]; then
                        cp final_applications/dashboard.md artifacts/reports/
                        echo "✅ Dashboard archived"
                      else
                        echo "⚠️ Dashboard not found"
                      fi
                      
                      # Copy application documents with better handling
                      echo "📄 Copying application documents..."
                      doc_count=0
                      find final_applications -name "*.md" -type f | while read file; do
                        if [ -f "$file" ]; then
                          cp "$file" artifacts/documents/
                          doc_count=$((doc_count + 1))
                        fi
                      done
                      
                      # Count actual copied files
                      actual_docs=$(ls artifacts/documents/*.md 2>/dev/null | wc -l)
                      echo "✅ Copied $actual_docs application documents"
                      
                      # Create comprehensive manifest
                      echo "📝 Creating manifest..."
                      cat > artifacts/MANIFEST.txt << EOF
                      Exchange Application Pipeline
                      Generated: $(date)
                      Commit: $(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                      Pipeline ID: <+pipeline.sequenceId>
                      Working Directory: $(pwd)
                      
                      File Summary:
                      EOF
                      
                      # Add file counts to manifest
                      echo "  Reports: $(ls artifacts/reports/*.md 2>/dev/null | wc -l)" >> artifacts/MANIFEST.txt
                      echo "  Documents: $(ls artifacts/documents/*.md 2>/dev/null | wc -l)" >> artifacts/MANIFEST.txt
                      echo "  Data Files: $(ls artifacts/data/* 2>/dev/null | wc -l)" >> artifacts/MANIFEST.txt
                      echo "" >> artifacts/MANIFEST.txt
                      
                      echo "All Files:" >> artifacts/MANIFEST.txt
                      find artifacts -type f | sort >> artifacts/MANIFEST.txt
                      
                      # Final summary
                      echo "📊 Artifact Summary:"
                      echo "  Reports: $(ls artifacts/reports/*.md 2>/dev/null | wc -l)"
                      echo "  Documents: $(ls artifacts/documents/*.md 2>/dev/null | wc -l)"
                      echo "  Total Files: $(find artifacts -type f | wc -l)"
                      
                      # Show manifest
                      echo "📋 Manifest created:"
                      cat artifacts/MANIFEST.txt

  # Pipeline variables
  variables:
    - name: "profile_file"
      type: "String"
      description: "Profile configuration file"
      value: "my_profile.yml"
      
    - name: "output_directory"
      type: "String"
      description: "Output directory for generated files"
      value: "final_applications"
      
    - name: "template_directory"
      type: "String"
      description: "Template directory"
      value: "templates"

  # Notification rules
  notificationRules:
    - name: "Pipeline Success Notification"
      identifier: "success_notification"
      pipelineEvents:
        - type: "PipelineSuccess"
      notificationMethod:
        type: "Email"
        spec:
          userGroups: []
          recipients:
            - "admin@dennisleehappy.org"
          subject: "✅ Exchange Application Pipeline Completed Successfully"
          body: |
            The Exchange Application Pipeline has completed successfully.
            
            Pipeline ID: <+pipeline.sequenceId>
            Execution Time: <+pipeline.startTs>
            Commit: <+codebase.commitSha>
            
            Generated documents are available in the final_applications directory.
            
            Best regards,
            ExchangeApp-IAC System
      enabled: true
    
    - name: "Pipeline Failure Notification"
      identifier: "failure_notification"
      pipelineEvents:
        - type: "PipelineFailed"
      notificationMethod:
        type: "Email"
        spec:
          userGroups: []
          recipients:
            - "admin@dennisleehappy.org"
          subject: "❌ Exchange Application Pipeline Failed"
          body: |
            The Exchange Application Pipeline has failed.
            
            Pipeline ID: <+pipeline.sequenceId>
            Failed Stage: <+pipeline.stage.name>
            
            Please check the pipeline logs for detailed error information.
            
            Best regards,
            ExchangeApp-IAC System
      enabled: true
