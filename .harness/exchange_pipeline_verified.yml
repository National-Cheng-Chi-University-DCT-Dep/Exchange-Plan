pipeline:
  name: "Exchange Application Pipeline"
  identifier: "exchange_application_pipeline"
  projectIdentifier: "exchange_plan"
  orgIdentifier: "default"
  tags: 
    system: "exchange-application"
    version: "1.0.0"
  
  properties:
    ci:
      codebase:
        connectorRef: "gitconnector"
        repoName: "Exchange-Plan"
        build: <+input>

  stages:
    - stage:
        name: "Environment Setup"
        identifier: "setup"
        description: "Setup Python environment and install dependencies"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "System Information"
                  identifier: "system_info"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Exchange Application System Setup"
                      echo "Date: $(date)"
                      echo "Python version: $(python3 --version)"
                      echo "Pip version: $(pip3 --version)"
                      echo "Git commit: $(git rev-parse --short HEAD)"
                      
              - step:
                  type: "Run"
                  name: "Install Dependencies"
                  identifier: "install_deps"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Installing Python dependencies..."
                      pip3 install --upgrade pip
                      pip3 install PyYAML
                      echo "Dependencies installed"

    - stage:
        name: "Validation and Generation"
        identifier: "validation_generation"
        description: "Validate eligibility and generate application documents"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "Validate Configuration"
                  identifier: "validate_config"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Validating system configuration..."
                      echo "Current directory: $(pwd)"
                      ls -la
                      
                      echo "This pipeline is designed for Exchange-Plan repository"
                      echo "Repository structure verification skipped for now"
                      echo "Configuration validation completed"
                      
              - step:
                  type: "Run"
                  name: "Run Eligibility Validation"
                  identifier: "run_validation"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Starting eligibility validation..."
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"
                      
                      if [ -f "intelligence_gathering/validator.py" ]; then
                        echo "Running application eligibility validator..."
                        python3 intelligence_gathering/validator.py
                        
                        if [ -f "final_applications/eligibility_report.md" ]; then
                          echo "Validation completed successfully"
                          head -20 final_applications/eligibility_report.md
                        else
                          echo "Validation script ran but no report generated"
                        fi
                      else
                        echo "Validator script not found, skipping validation"
                      fi
                      
              - step:
                  type: "Run"
                  name: "Generate Application Documents"
                  identifier: "generate_docs"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Generating application documents..."
                      echo "Current directory: $(pwd)"
                      export PYTHONPATH="${PYTHONPATH}:$(pwd)"
                      
                      # Check if generator script exists
                      if [ -f "build_scripts/generate_docs.py" ]; then
                        echo "Found document generator script"
                        
                        # Create final_applications directory if it doesn't exist
                        mkdir -p final_applications
                        echo "Ensured final_applications directory exists"
                        
                        echo ""
                        echo "Running document generator..."
                        python3 build_scripts/generate_docs.py
                        
                        echo ""
                        echo "Checking generated files..."
                        if [ -d "final_applications" ]; then
                          echo "final_applications directory exists"
                          
                          # Count documents
                          study_plans=$(find final_applications -name "*_study_plan_*.md" 2>/dev/null | wc -l)
                          cv_docs=$(find final_applications -name "*_cv_*.md" 2>/dev/null | wc -l)
                          all_files=$(find final_applications -type f 2>/dev/null | wc -l)
                          
                          echo "Generated: $study_plans study plans, $cv_docs CV documents"
                          echo "Total files in final_applications: $all_files"
                          
                          # Show directory structure
                          echo ""
                          echo "Directory structure:"
                          find final_applications -type f | head -20
                          
                          # Check for dashboard
                          if [ -f "final_applications/dashboard.md" ]; then
                            echo ""
                            echo "Dashboard generated successfully"
                          else
                            echo ""
                            echo "WARNING: Dashboard not generated"
                          fi
                        else
                          echo "ERROR: final_applications directory not created"
                        fi
                      else
                        echo "ERROR: Document generator not found at build_scripts/generate_docs.py"
                        echo "Available build_scripts files:"
                        ls -la build_scripts/ 2>/dev/null || echo "build_scripts directory not found"
                      fi

    - stage:
        name: "Quality Check and Save Results"
        identifier: "quality_and_save"
        description: "Quality check and save results to GitHub"
        type: "CI"
        spec:
          cloneCodebase: true
          platform:
            os: "Linux"
            arch: "Amd64"
          runtime:
            type: "Cloud"
            spec: {}
          execution:
            steps:
              - step:
                  type: "Run"
                  name: "Quality Check"
                  identifier: "quality_check"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Running quality checks..."
                      echo "Current directory: $(pwd)"
                      
                      if [ -d "final_applications" ]; then
                        doc_count=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
                        echo "Total documents found: $doc_count"
                        
                        if [ $doc_count -gt 0 ]; then
                          echo "Quality check passed"
                          
                          # Show document summary
                          echo ""
                          echo "Generated documents:"
                          find final_applications -name "*.md" -type f | sort
                        else
                          echo "No documents generated"
                        fi
                      else
                        echo "final_applications directory not found"
                      fi
                      
              - step:
                  type: "Run"
                  name: "Commit and Push Results to GitHub"
                  identifier: "commit_push"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "Preparing to commit generated files to GitHub..."
                      
                      # Debug: Show current directory and contents
                      echo "Current directory: $(pwd)"
                      echo "Directory contents:"
                      ls -la
                      
                      # Search for final_applications directory
                      echo ""
                      echo "Searching for final_applications directory..."
                      find . -name "final_applications" -type d 2>/dev/null || echo "No final_applications directory found"
                      
                      # Search for any generated .md files
                      echo ""
                      echo "Searching for generated markdown files..."
                      find . -name "*.md" -path "*/final_applications/*" -type f 2>/dev/null | head -10 || echo "No markdown files found in final_applications"
                      
                      # Configure git
                      git config user.email "harness-pipeline@dennisleehappy.org"
                      git config user.name "Harness Pipeline Bot"
                      
                      # Check if there are files to commit
                      if [ -d "final_applications" ] && [ "$(ls -A final_applications 2>/dev/null)" ]; then
                        echo ""
                        echo "Found final_applications directory with content!"
                        echo "Files to commit:"
                        find final_applications -type f | head -20
                        
                        # Add all generated files
                        git add final_applications/
                        
                        # Check if there are changes
                        if git diff --staged --quiet; then
                          echo ""
                          echo "No changes to commit (files already exist in repository)"
                        else
                          # Commit with timestamp
                          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
                          git commit -m "feat: Generate exchange application documents - $TIMESTAMP
                          
                          Generated by Harness Pipeline
                          Pipeline ID: <+pipeline.sequenceId>
                          Execution Time: <+pipeline.startTs>
                          
                          Documents generated:
                          - Eligibility report
                          - Application dashboard
                          - Study plans and CVs for qualified universities"
                          
                          # Push to GitHub
                          echo ""
                          echo "Pushing to GitHub..."
                          git push origin HEAD:<+codebase.branch>
                          
                          echo ""
                          echo "Successfully pushed generated documents to GitHub!"
                          echo "Branch: <+codebase.branch>"
                          echo "Commit: $(git rev-parse --short HEAD)"
                        fi
                      else
                        echo ""
                        echo "WARNING: No final_applications directory found or directory is empty"
                        echo "This means the document generation step may have failed"
                        echo "Please check the previous pipeline steps for errors"
                        
                        # Still try to create a summary of what we have
                        echo ""
                        echo "Creating execution summary..."
                        mkdir -p pipeline_logs
                        echo "Pipeline Execution Summary" > pipeline_logs/execution_summary.txt
                        echo "==========================" >> pipeline_logs/execution_summary.txt
                        echo "Pipeline ID: <+pipeline.sequenceId>" >> pipeline_logs/execution_summary.txt
                        echo "Execution Time: <+pipeline.startTs>" >> pipeline_logs/execution_summary.txt
                        echo "Status: Completed but no documents generated" >> pipeline_logs/execution_summary.txt
                        echo "" >> pipeline_logs/execution_summary.txt
                        echo "Current Directory: $(pwd)" >> pipeline_logs/execution_summary.txt
                        echo "Issue: final_applications directory not found or empty" >> pipeline_logs/execution_summary.txt
                        echo "Recommendation: Check validator.py and generate_docs.py execution logs" >> pipeline_logs/execution_summary.txt
                        
                        git add pipeline_logs/
                        git commit -m "docs: Pipeline execution log - no documents generated" || echo "Nothing to commit"
                        git push origin HEAD:<+codebase.branch> || echo "Push failed or nothing to push"
                      fi
                      
              - step:
                  type: "Run"
                  name: "Success Notification"
                  identifier: "success_notification"
                  spec:
                    shell: "Bash"
                    command: |
                      echo "=========================================="
                      echo "Exchange Application Pipeline Completed!"
                      echo "=========================================="
                      echo "Generated: $(date)"
                      echo "Location: final_applications/"
                      echo "GitHub Branch: <+codebase.branch>"
                      echo ""
                      echo "Generated files have been committed and pushed to GitHub!"
                      echo ""
                      echo "Next steps:"
                      echo "1. Pull the latest changes from GitHub"
                      echo "2. Review generated documents in final_applications/"
                      echo "3. Check application deadlines"
                      echo "4. Prepare English test scores"
                      echo "5. Contact recommenders"
                      echo "=========================================="

  variables:
    - name: "profile_file"
      type: "String"
      description: "Profile configuration file"
      value: "my_profile.yml"
      
    - name: "output_directory"
      type: "String"
      description: "Output directory for generated files"
      value: "final_applications"
      
    - name: "template_directory"
      type: "String"
      description: "Template directory"
      value: "templates"

  notificationRules:
    - name: "Pipeline Success Notification"
      identifier: "success_notification"
      pipelineEvents:
        - type: "PipelineSuccess"
      notificationMethod:
        type: "Email"
        spec:
          userGroups: []
          recipients:
            - "admin@dennisleehappy.org"
          subject: "Exchange Application Pipeline Completed Successfully"
          body: |
            The Exchange Application Pipeline has completed successfully.
            
            Pipeline ID: <+pipeline.sequenceId>
            Execution Time: <+pipeline.startTs>
            Commit: <+codebase.commitSha>
            
            Generated documents are available in the final_applications directory.
            
            Best regards,
            ExchangeApp-IAC System
      enabled: true
    
    - name: "Pipeline Failure Notification"
      identifier: "failure_notification"
      pipelineEvents:
        - type: "PipelineFailed"
      notificationMethod:
        type: "Email"
        spec:
          userGroups: []
          recipients:
            - "admin@dennisleehappy.org"
          subject: "Exchange Application Pipeline Failed"
          body: |
            The Exchange Application Pipeline has failed.
            
            Pipeline ID: <+pipeline.sequenceId>
            Failed Stage: <+pipeline.stage.name>
            
            Please check the pipeline logs for detailed error information.
            
            Best regards,
            ExchangeApp-IAC System
      enabled: true
