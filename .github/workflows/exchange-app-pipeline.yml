name: Exchange Application CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'my_profile.yml'
      - 'templates/**'
      - 'build_scripts/**'
      - 'source_data/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      generate_docs:
        description: 'Generate application documents'
        required: false
        default: 'true'
      deploy_pages:
        description: 'Deploy to GitHub Pages'
        required: false
        default: 'true'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job 1: 環境設置與驗證
  setup-and-validate:
    name: Setup and Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML markdown jinja2 python-dateutil
          echo "✅ Dependencies installed"
      
      - name: Validate Configuration
        run: |
          echo "📋 Validating my_profile.yml..."
          python -c "import yaml; yaml.safe_load(open('my_profile.yml'))"
          echo "✅ Configuration validated"
      
      - name: System Information
        run: |
          echo "🖥️ System Information"
          echo "===================="
          echo "Date: $(date)"
          echo "Python: $(python --version)"
          echo "Git Commit: $(git rev-parse --short HEAD)"
          echo "Branch: ${GITHUB_REF#refs/heads/}"
          echo "===================="

  # Job 2: 生成申請文件
  generate-documents:
    name: Generate Application Documents
    needs: setup-and-validate
    runs-on: ubuntu-latest
    
    outputs:
      docs-generated: ${{ steps.check-docs.outputs.generated }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install PyYAML markdown jinja2 python-dateutil
      
      - name: Generate Documents
        id: generate
        run: |
          echo "📝 Generating application documents..."
          
          if [ -f "build_scripts/generate_docs.py" ]; then
            python build_scripts/generate_docs.py --all
            echo "✅ Documents generated"
          else
            echo "⚠️ Generator script not found"
          fi
      
      - name: Check Generated Documents
        id: check-docs
        run: |
          if [ -d "final_applications" ]; then
            doc_count=$(find final_applications -name "*.md" 2>/dev/null | wc -l)
            echo "📊 Generated $doc_count documents"
            echo "generated=true" >> $GITHUB_OUTPUT
            
            echo "📁 Generated files:"
            find final_applications -type f | sort
          else
            echo "⚠️ No documents generated"
            echo "generated=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload Generated Documents
        uses: actions/upload-artifact@v4
        with:
          name: generated-documents
          path: final_applications/
          retention-days: 30
      
      - name: Commit Generated Documents
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          if [ -d "final_applications" ] && [ "$(ls -A final_applications 2>/dev/null)" ]; then
            git add final_applications/
            
            if ! git diff --staged --quiet; then
              TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
              git commit -m "📄 Auto-generate application documents

Generated by GitHub Actions
Timestamp: $TIMESTAMP
Commit: ${GITHUB_SHA::7}
Workflow: ${GITHUB_WORKFLOW}"
              
              git push
              echo "✅ Documents committed and pushed"
            else
              echo "ℹ️ No changes to commit"
            fi
          fi

  # Job 3: 生成 GitHub Pages
  build-github-pages:
    name: Build GitHub Pages
    needs: generate-documents
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install PyYAML markdown jinja2 python-dateutil
      
      - name: Download Generated Documents
        uses: actions/download-artifact@v4
        with:
          name: generated-documents
          path: final_applications/
      
      - name: Generate GitHub Pages
        run: |
          echo "🌐 Generating GitHub Pages..."
          
          # Create docs directory
          mkdir -p docs
          
          # Run page generator
          if [ -f "build_scripts/generate_pages.py" ]; then
            python build_scripts/generate_pages.py
          else
            echo "⚠️ Page generator not found, using basic generation"
            
            # Copy index
            if [ -f "docs/index.html" ]; then
              echo "✅ Using existing index.html"
            else
              echo "Creating basic index.html"
              cat > docs/index.html << 'EOF'
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exchange Application System</title>
</head>
<body>
    <h1>Exchange Application System</h1>
    <p>Documents generated successfully!</p>
</body>
</html>
EOF
            fi
          fi
          
          echo "✅ GitHub Pages generated"
      
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

  # Job 4: 部署到 GitHub Pages
  deploy-github-pages:
    name: Deploy to GitHub Pages
    needs: build-github-pages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Display Deployment URL
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 URL: ${{ steps.deployment.outputs.page_url }}"

  # Job 5: 通知與總結
  notify-completion:
    name: Notify Completion
    needs: [generate-documents, deploy-github-pages]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "## 🎓 Exchange Application Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${GITHUB_SHA::7}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${GITHUB_REF#refs/heads/}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documents Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Pages Built" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

